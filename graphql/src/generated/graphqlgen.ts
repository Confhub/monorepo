// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from 'graphql';
import { AuthPayload, RootMutation, RootQuery } from '../types';
import { User, Conference, Tag, Image, Social, Price } from './prisma-client';
import { Context } from '../types';

type UserRole = 'ATTENDEE' | 'SPEAKER' | 'MODERATOR';
type PublishStatus = 'DRAFT' | 'PUBLISHED';
type Currency = 'USD' | 'EUR';

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) =>
      parent.token === undefined ? null : parent.token,
  };

  export type TokenResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type UserResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | null | Promise<User | null>;

  export interface Type {
    token: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    user: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | null | Promise<User | null>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    email: (parent: User) => parent.email,
    name: (parent: User) => parent.name,
    createdAt: (parent: User) => parent.createdAt,
    role: (parent: User) => parent.role,
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type NameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type RoleResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => UserRole | null | Promise<UserRole | null>;

  export type CreatedAtResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    name: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    role: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => UserRole | null | Promise<UserRole | null>;

    createdAt: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;
  }
}

export namespace ConferenceResolvers {
  export const defaultResolvers = {
    id: (parent: Conference) => parent.id,
    name: (parent: Conference) => parent.name,
    description: (parent: Conference) =>
      parent.description === undefined ? null : parent.description,
    url: (parent: Conference) => parent.url,
    startDate: (parent: Conference) => parent.startDate,
    endDate: (parent: Conference) => parent.endDate,
    publishStatus: (parent: Conference) =>
      parent.publishStatus === undefined ? null : parent.publishStatus,
  };

  export type IdResolver = (
    parent: Conference,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type NameResolver = (
    parent: Conference,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type DescriptionResolver = (
    parent: Conference,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type TagsResolver = (
    parent: Conference,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Tag[] | null | Promise<Tag[] | null>;

  export type ImageResolver = (
    parent: Conference,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Image | null | Promise<Image | null>;

  export type UrlResolver = (
    parent: Conference,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type StartDateResolver = (
    parent: Conference,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type EndDateResolver = (
    parent: Conference,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type SocialResolver = (
    parent: Conference,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Social | null | Promise<Social | null>;

  export type PublishStatusResolver = (
    parent: Conference,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => PublishStatus | null | Promise<PublishStatus | null>;

  export type PricesResolver = (
    parent: Conference,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Price[] | null | Promise<Price[] | null>;

  export interface Type {
    id: (
      parent: Conference,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    name: (
      parent: Conference,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    description: (
      parent: Conference,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    tags: (
      parent: Conference,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Tag[] | null | Promise<Tag[] | null>;

    image: (
      parent: Conference,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Image | null | Promise<Image | null>;

    url: (
      parent: Conference,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    startDate: (
      parent: Conference,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    endDate: (
      parent: Conference,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    social: (
      parent: Conference,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Social | null | Promise<Social | null>;

    publishStatus: (
      parent: Conference,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => PublishStatus | null | Promise<PublishStatus | null>;

    prices: (
      parent: Conference,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Price[] | null | Promise<Price[] | null>;
  }
}

export namespace TagResolvers {
  export const defaultResolvers = {
    id: (parent: Tag) => parent.id,
    name: (parent: Tag) => parent.name,
    slug: (parent: Tag) => parent.slug,
  };

  export type IdResolver = (
    parent: Tag,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type NameResolver = (
    parent: Tag,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type SlugResolver = (
    parent: Tag,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export interface Type {
    id: (
      parent: Tag,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    name: (
      parent: Tag,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    slug: (
      parent: Tag,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;
  }
}

export namespace ImageResolvers {
  export const defaultResolvers = {
    id: (parent: Image) => parent.id,
    src: (parent: Image) => parent.src,
    alt: (parent: Image) => (parent.alt === undefined ? null : parent.alt),
  };

  export type IdResolver = (
    parent: Image,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type SrcResolver = (
    parent: Image,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type AltResolver = (
    parent: Image,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export interface Type {
    id: (
      parent: Image,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    src: (
      parent: Image,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    alt: (
      parent: Image,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;
  }
}

export namespace SocialResolvers {
  export const defaultResolvers = {
    facebook: (parent: Social) =>
      parent.facebook === undefined ? null : parent.facebook,
    twitter: (parent: Social) =>
      parent.twitter === undefined ? null : parent.twitter,
    instagram: (parent: Social) =>
      parent.instagram === undefined ? null : parent.instagram,
  };

  export type FacebookResolver = (
    parent: Social,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type TwitterResolver = (
    parent: Social,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type InstagramResolver = (
    parent: Social,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export interface Type {
    facebook: (
      parent: Social,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    twitter: (
      parent: Social,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    instagram: (
      parent: Social,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;
  }
}

export namespace PriceResolvers {
  export const defaultResolvers = {
    id: (parent: Price) => parent.id,
    name: (parent: Price) => (parent.name === undefined ? null : parent.name),
    amount: (parent: Price) => parent.amount,
    currency: (parent: Price) =>
      parent.currency === undefined ? null : parent.currency,
    expirationDate: (parent: Price) =>
      parent.expirationDate === undefined ? null : parent.expirationDate,
  };

  export type IdResolver = (
    parent: Price,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type NameResolver = (
    parent: Price,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export type AmountResolver = (
    parent: Price,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => number | null | Promise<number | null>;

  export type CurrencyResolver = (
    parent: Price,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Currency | null | Promise<Currency | null>;

  export type ExpirationDateResolver = (
    parent: Price,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => string | null | Promise<string | null>;

  export interface Type {
    id: (
      parent: Price,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    name: (
      parent: Price,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;

    amount: (
      parent: Price,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => number | null | Promise<number | null>;

    currency: (
      parent: Price,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Currency | null | Promise<Currency | null>;

    expirationDate: (
      parent: Price,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => string | null | Promise<string | null>;
  }
}

export namespace RootMutationResolvers {
  export const defaultResolvers = {};

  export interface CreateConferenceInput {
    name: string;
    description: string | null;
    tags: ConferenceTagInput[] | null;
    image: ConferenceImageInput | null;
    url: string;
    startDate: string;
    endDate: string;
    location: ConferenceLocationInput;
    social: ConferenceSocialInput | null;
    prices: PriceInput[] | null;
  }
  export interface ConferenceTagInput {
    id: string | null;
    name: string | null;
    slug: string | null;
  }
  export interface ConferenceImageInput {
    id: string | null;
    src: string | null;
    alt: string | null;
  }
  export interface ConferenceLocationInput {
    venueName: string | null;
    country: string;
    city: string;
    address: string | null;
    coordinates: ConferenceCoordinatesInput;
  }
  export interface ConferenceCoordinatesInput {
    latitude: number;
    longitude: number;
  }
  export interface ConferenceSocialInput {
    facebook: string | null;
    twitter: string | null;
    instagram: string | null;
  }
  export interface PriceInput {
    id: string | null;
    name: string | null;
    amount: number | null;
    currency: Currency | null;
    expirationDate: string | null;
  }
  export interface EditConferenceInput {
    name: string | null;
    description: string | null;
    tags: ConferenceTagInput[] | null;
    image: ConferenceImageInput | null;
    url: string | null;
    startDate: string | null;
    endDate: string | null;
    location: ConferenceLocationInput | null;
    social: ConferenceSocialInput | null;
    prices: PriceInput[] | null;
  }

  export interface ArgsCreateUser {
    email: string;
    password: string;
    name: string;
  }

  export interface ArgsSignInUser {
    email: string;
    password: string;
  }

  export interface ArgsChangeUserRole {
    id: string;
    newRole: UserRole;
  }

  export interface ArgsCreateConference {
    data: CreateConferenceInput;
  }

  export interface ArgsUpdateConference {
    id: string;
    data: EditConferenceInput;
  }

  export interface ArgsPublishConference {
    id: string;
  }

  export interface ArgsDeleteConference {
    id: string;
  }

  export interface ArgsCreateTag {
    name: string;
  }

  export interface ArgsDeleteTag {
    id: string;
  }

  export interface ArgsUpdateTag {
    id: string;
    name: string;
  }

  export type CreateUserResolver = (
    parent: RootMutation,
    args: ArgsCreateUser,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => AuthPayload | null | Promise<AuthPayload | null>;

  export type SignInUserResolver = (
    parent: RootMutation,
    args: ArgsSignInUser,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => AuthPayload | null | Promise<AuthPayload | null>;

  export type ChangeUserRoleResolver = (
    parent: RootMutation,
    args: ArgsChangeUserRole,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | null | Promise<User | null>;

  export type CreateConferenceResolver = (
    parent: RootMutation,
    args: ArgsCreateConference,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Conference | null | Promise<Conference | null>;

  export type UpdateConferenceResolver = (
    parent: RootMutation,
    args: ArgsUpdateConference,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Conference | null | Promise<Conference | null>;

  export type PublishConferenceResolver = (
    parent: RootMutation,
    args: ArgsPublishConference,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Conference | null | Promise<Conference | null>;

  export type DeleteConferenceResolver = (
    parent: RootMutation,
    args: ArgsDeleteConference,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Conference | null | Promise<Conference | null>;

  export type CreateTagResolver = (
    parent: RootMutation,
    args: ArgsCreateTag,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Tag | null | Promise<Tag | null>;

  export type DeleteTagResolver = (
    parent: RootMutation,
    args: ArgsDeleteTag,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Tag | null | Promise<Tag | null>;

  export type UpdateTagResolver = (
    parent: RootMutation,
    args: ArgsUpdateTag,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Tag | null | Promise<Tag | null>;

  export interface Type {
    createUser: (
      parent: RootMutation,
      args: ArgsCreateUser,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => AuthPayload | null | Promise<AuthPayload | null>;

    signInUser: (
      parent: RootMutation,
      args: ArgsSignInUser,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => AuthPayload | null | Promise<AuthPayload | null>;

    changeUserRole: (
      parent: RootMutation,
      args: ArgsChangeUserRole,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | null | Promise<User | null>;

    createConference: (
      parent: RootMutation,
      args: ArgsCreateConference,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Conference | null | Promise<Conference | null>;

    updateConference: (
      parent: RootMutation,
      args: ArgsUpdateConference,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Conference | null | Promise<Conference | null>;

    publishConference: (
      parent: RootMutation,
      args: ArgsPublishConference,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Conference | null | Promise<Conference | null>;

    deleteConference: (
      parent: RootMutation,
      args: ArgsDeleteConference,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Conference | null | Promise<Conference | null>;

    createTag: (
      parent: RootMutation,
      args: ArgsCreateTag,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Tag | null | Promise<Tag | null>;

    deleteTag: (
      parent: RootMutation,
      args: ArgsDeleteTag,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Tag | null | Promise<Tag | null>;

    updateTag: (
      parent: RootMutation,
      args: ArgsUpdateTag,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Tag | null | Promise<Tag | null>;
  }
}

export namespace RootQueryResolvers {
  export const defaultResolvers = {
    conference: (parent: RootQuery) => parent.conference,
    conferences: (parent: RootQuery) => parent.conferences,
  };

  export interface ConferenceSortByInput {
    publishStatus: PublishStatus | null;
    tags: string[] | null;
    location: ConferenceSortByLocationInput | null;
  }
  export interface ConferenceSortByLocationInput {
    coordinates: LocationCoordinatesInput | null;
    continent: string | null;
  }
  export interface LocationCoordinatesInput {
    neLatitude: number | null;
    neLongitude: number | null;
    swLatitude: number | null;
    swLongitude: number | null;
  }

  export interface ArgsConference {
    id: string;
  }

  export interface ArgsConferences {
    sortBy: ConferenceSortByInput | null;
    skip: number | null;
    after: string | null;
    before: string | null;
    first: number | null;
    last: number | null;
  }

  export type UserResolver = (
    parent: RootQuery,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => User | null | Promise<User | null>;

  export type ConferenceResolver = (
    parent: RootQuery,
    args: ArgsConference,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Conference | null | Promise<Conference | null>;

  export type ConferencesResolver = (
    parent: RootQuery,
    args: ArgsConferences,
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Conference[] | null | Promise<Conference[] | null>;

  export type TagsResolver = (
    parent: RootQuery,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo,
  ) => Tag[] | null | Promise<Tag[] | null>;

  export interface Type {
    user: (
      parent: RootQuery,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => User | null | Promise<User | null>;

    conference: (
      parent: RootQuery,
      args: ArgsConference,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Conference | null | Promise<Conference | null>;

    conferences: (
      parent: RootQuery,
      args: ArgsConferences,
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Conference[] | null | Promise<Conference[] | null>;

    tags: (
      parent: RootQuery,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo,
    ) => Tag[] | null | Promise<Tag[] | null>;
  }
}

export interface Resolvers {
  AuthPayload: AuthPayloadResolvers.Type;
  User: UserResolvers.Type;
  Conference: ConferenceResolvers.Type;
  Tag: TagResolvers.Type;
  Image: ImageResolvers.Type;
  Social: SocialResolvers.Type;
  Price: PriceResolvers.Type;
  RootMutation: RootMutationResolvers.Type;
  RootQuery: RootQueryResolvers.Type;
}
